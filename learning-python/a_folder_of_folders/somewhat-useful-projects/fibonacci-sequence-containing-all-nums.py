# fibonacci sequence generator that checks if the generated number contains
# all values 0-9

# starters
display_me = 0
to_add = 1

# user inputs the number of terms to iterate until
n = int(input("How many terms? "))

# function which checks each value 0-9 is in the number generated by the sequence
def checker(number_to_check,idx):
    numberlist = [0,1,2,3,4,5,6,7,8,9]
    checklist =  [0,0,0,0,0,0,0,0,0,0]
    # if the value is found then update the appropriate index of checklist from 0-->1
    for number in numberlist:
        if str(number) in number_to_check:
            checklist[number] = 1
    # if all values of checklist are true then return the checked number and its index (technically its the index + 1)
    if checklist == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]:
        return number_to_check, idx

# unfiltered_valid is used as a temporary list to store the returned values
# this is needed as if the values are not found in the checked numbers it will return "None" types which need to be filtered out
unfiltered_valid = []
for i in range(n):
    unfiltered_valid.append(checker(str(display_me), i+1)) # add the number and its index to the list
    
    # FIBONACCI SEQUENCE LOGIC
    print(display_me) # display the current value, 0
    next_in_sequence = display_me + to_add # add the second value to the previous value, 0+1 = 1
    display_me = to_add # set the return of the above line to be the new fisplay value
    to_add = next_in_sequence # update to_add to be the next value in the sequence

# filters the list created by func:checker, removing any "None" values
valid = []
for item in unfiltered_valid: # for every value of the list created by func:checker
    if item != None: # if not none
        valid.append(item) # add to new list
print(valid)

# 62 is the first index that outputs a value with all digits 0-9
# Where A = 01, B = 02... Z = 26
# fib(62) = 2504730781961
#           0123456789|||
#                    10||
#                     11|
#                      12
# Could be used for cryptography maybe?
# e.g 8 6 4 --> 8 11 3
# or 2 9 1 1 2 0 2 2 --> 0 10 9 9 0 2 0 0
